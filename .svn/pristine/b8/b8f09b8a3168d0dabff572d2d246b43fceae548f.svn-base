<template>
  <el-row class="addtest">
    <el-col :span="24">
      <div class="navigationbar">
        <span class="navigationname">
          实验平台管理
          <i class="el-icon-arrow-right" aria-hidden="true"></i>
          新增实验
        </span>
      </div>
    </el-col>
    <el-col :span="24">
      <el-steps :active="activeSteps" simple>
        <el-step title="基本信息" icon="el-icon-edit-outline"></el-step>
        <el-step title="内容编辑" icon="el-icon-edit"></el-step>
        <el-step title="虚拟机配置" icon="el-icon-picture"></el-step>
      </el-steps>
    </el-col>

    <el-col :span="24" v-if="activeSteps==1">
      <el-form :model="testformdeil" class="testformdeil" label-width="120px;" size="small">
        <el-form-item label="实验名称:">
          <el-input v-model="testformdeil.user" placeholder="实验名称"></el-input>
        </el-form-item>
        <el-form-item label="实验简介:">
          <el-input v-model="testformdeil.user" placeholder="实验简介" type="textarea" :rows="2"></el-input>
        </el-form-item>
        <el-form-item label="实验时长:">
          <el-input v-model="testformdeil.user" placeholder="实验时长 单位分钟" type="number"></el-input>
        </el-form-item>
        <el-form-item label="选择所属系:" prop="selectedOptions">
          <div class="blockcaser">
            <el-cascader
              :options="optionselect"
              v-model="testformdeil.selectedOptions"
              @change="changeval"
            ></el-cascader>
          </div>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" size="small" @click="basicnext">下一步</el-button>
        </el-form-item>
      </el-form>
    </el-col>
    <el-col :span="24" v-if="activeSteps==2" class="conctentedit">
      <el-col :span="8" class="conctentborder concentborderleft">
        <el-tree
          :data="treedata"
          node-key="id"
          :current-node-key="4"
          highlight-current
          default-expand-all
          :expand-on-click-node="false"
          @current-change="currentchange"
        >
          <span class="custom-tree-node" slot-scope="{ node, data }">
            <span>{{ node.label }}</span>
            <span>
              <span v-if="node.data.label=='实验步骤'">
                <i class="el-icon-plus" @click="() => append(node,data)" style="width:23px;"></i>
              </span>
              <span v-if="node.data.id>999">
                <i
                  class="el-icon-edit-outline"
                  style="width:23px;"
                  @click="() => edittree(node, data)"
                ></i>
              </span>
              <span v-if="node.data.label !=='内容树'">
                <i class="el-icon-delete" @click="() => remove(node, data)"></i>
              </span>
            </span>
          </span>
        </el-tree>
        <el-dialog title="添加新的实验步骤" width="120" @close="closediglog" :visible.sync="dialogTest">
          <el-form :model="treeStep" ref="treeStep">
            <el-form-item
              prop="steepName"
              :rules="[ { required: true, message: '请输入添加步骤的名字', trigger: 'blur' },]"
            >
              <el-input v-model="treeStep.steepName" placeholder="请输入步骤名字"></el-input>
            </el-form-item>
          </el-form>
          <span slot="footer" class="dialog-footer">
            <el-button @click="dialogTest = false" size="mini">取 消</el-button>
            <el-button type="primary" @click="submitStepName" size="mini">确 定</el-button>
          </span>
        </el-dialog>
      </el-col>
      <el-col :span="16" class="conctentborder conctenteditor">
        <div class="testName">{{showstepName}}</div>
        <mavon-editor
          v-model="markdownedit.analysis"
          :ishljs="true"
          :subfield="false"
          class="mavom_editor"
          :placeholder="showstepName"
        />
      </el-col>
      <el-col :span="24">
        <div style="float:right;margin-top:40px">
          <el-button type="primary" size="mini" @click="backStep">上一步</el-button>
          <el-button type="primary" size="mini" @click="basicnext">下一步</el-button>
        </div>
      </el-col>
    </el-col>
    <el-col :span="24" v-if="activeSteps==3">
      <hr>
      <div class="virtualMachine">虚拟机列表</div>
      <hr>
      <el-form size="mini">
        <el-form-item label="名称:">
          <span>dwfefe</span>
        </el-form-item>
        <el-form-item label="镜像:">
          <span>dwfefe</span>
        </el-form-item>
        <el-form-item label="镜像:">
          <span>dwfefe</span>
        </el-form-item>
        <el-form-item label="网络:">
          <span>dwfefe</span>
        </el-form-item>
      </el-form>
      <el-col :span="24">
        <div style="float:right;margin-top:40px">
          <el-button type="primary" size="mini" @click="backStep">上一步</el-button>
          <el-button type="primary" size="mini">保存</el-button>
        </div>
      </el-col>
    </el-col>
  </el-row>
</template>
<script>
let id = 1000;
import {
  courseStructurepage,
  courseClassificationpage,
  courseContentpage
} from "@/api/api";
export default {
  data() {
    const data = [
      {
        id: 1,
        label: "内容树",
        children: [
          {
            id: 4,
            label: "实验目的"
          },
          {
            id: 5,
            label: "实验原理"
          },
          {
            id: 7,
            label: "实验环境"
          },
          {
            id: 9,
            label: "实验步骤"
          },
          {
            id: 11,
            label: "综合测试"
          },
          {
            id: 13,
            label: "实验总结"
          }
        ]
      }
    ];
    return {
      showstepName: "实验目的",
      treeStep: {
        steepName: "" //步骤调的名字,
      },
      dialogTest: false, //编辑器的步骤显示
      markdownedit: {
        //编辑器
        analysis: ""
      },
      treedata: JSON.parse(JSON.stringify(data)),
      defaultProps: {
        children: "children",
        label: "label"
      },

      defaultProps: {
        children: "children",
        label: "label"
      },

      activeSteps: 1,
      optionselect: [],
      testformdeil: {
        selectedOptions: []
      },
      dataStep: {}, //存当前的
      steptree: false,
      childrenedit: [], //存当前点击的时候是否孩子
      indexedit: null, //存下标
      editissdd: false
    };
  },
  methods: {
    append(node, data) {
      //添加节点
      console.log("节点");
      console.log(node);
      console.log(data);
      this.dialogTest = true;
      this.dataStep = data;
      this.editissdd = false; //判断是编辑的时候,还是新增的时候!
    },
    currentchange(data, node) {
      console.log("当前选中的的");
      console.log(data);
      console.log(node);
      if (data.label == "内容树" || data.label == "实验步骤") {
      } else {
        this.showstepName = data.label;
      }
    },

    closediglog() {
      this.treeStep.steepName = ""; //关闭的时候清空
    },
    submitStepName() {
      //步骤的提交名字
      console.log(this.childrenedit);
      const newChild = { id: id++, label: this.treeStep.steepName };
      console.log(this.dataStep);

      if (this.editissdd == false) {
        this.$refs["treeStep"].validate(valid => {
          if (valid) {
            if (!this.dataStep.children) {
              this.$set(this.dataStep, "children", []);
            }
            this.dialogTest = false;
            setTimeout(() => {
              this.dataStep.children.push(newChild); //添加孩子
            }, 500);
          }
        });
      } else {
        this.$refs["treeStep"].validate(valid => {
          if (valid) {
            if (!this.dataStep.children) {
              this.$set(this.dataStep, "children", []);
            }
            this.dialogTest = false;
            this.childrenedit.splice(this.indexedit, 1);
            setTimeout(() => {
              this.dataStep.children.push(newChild); //添加孩子
            }, 500);
          }
        });
      }
    },
    remove(node, data) {
      //移除子节点
      this.$confirm("此操作将永久改步骤以及编辑的内容, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        const parent = node.parent;
        const children = parent.data.children || parent.data;
        const index = children.findIndex(d => d.id === data.id);
        children.splice(index, 1);
      });
    },
    edittree(node, data) {
      //编辑的时候
      this.childrenedit = node.parent.data.children;
      this.indexedit = this.childrenedit.findIndex(item => item.id === data.id); //在数组中找对应的,
      this.dialogTest = true;
      this.treeStep.steepName = data.label;
      this.editissdd = true;
    },
    selecttab(index) {
      console.log(index.label);
    },
    changeval(val) {
      //this.formvideo.courseContentId = this.formvideo.selectedOptions[2];
    },
    focusdata() {
      var params = {
        currentPage: 1,
        pageSize: 100
      };
      courseStructurepage(params).then(res => {
        if (res.data.code == 0) {
          let lists = res.data.data.list;
          lists.forEach((item, index) => {
            this.optionselect.push({
              label: item.courseStructureName,
              value: item.courseStructureId,
              children: []
            });
            this.Stairarryindex = this.optionselect;
          });
          this.Stairarryindex.forEach((item, indexcas) => {
            var parms = {
              currentPage: 1,
              pageSize: 1000,
              courseStructureId: this.optionselect[indexcas].value
            };
            courseClassificationpage(parms).then(res => {
              let cascChid = [];
              cascChid = res.data.data.list;
              var _this = this;
              if (res.data.code == 0) {
                cascChid.forEach((item, index) => {
                  this.optionselect[indexcas].children.push({
                    label: item.courseClassificationName,
                    value: item.courseClassificationId,
                    children: []
                  });
                  var parms = {
                    currentPage: 1,
                    pageSize: 1000,
                    courseClassificationId: this.optionselect[indexcas]
                      .children[index].value
                  };
                  let conentchid = [];
                  courseContentpage(parms).then(res => {
                    conentchid = res.data.data.list;
                    conentchid.forEach((item, contentindex) => {
                      this.optionselect[indexcas].children[index].children.push(
                        {
                          label: item.courseContentName,
                          value: item.courseContentId
                        }
                      );
                    });
                  });
                });
              }
            });
          });
        }
      });
    },
    basicnext() {
      //点击下一步
      this.activeSteps = this.activeSteps + 1;
    },
    backStep() {
      //点击上一步
      this.activeSteps = this.activeSteps - 1;
    }
  },
  mounted() {
    this.focusdata();
  }
};
</script>

<style  lang='scss' scoped>
.addtest {
  .conctentedit {
    height: 400px;

    margin-top: 20px;
    border: 1px solid #ebebeb;
  }
  .mavom_editor {
    margin: 0px 20px;
    height: 350px;
    overflow-y: auto;
    border: 1px solid #ebebeb;
  }
  .concentborderleft {
    height: 380px;
    border-bottom: 1px solid #ebebeb;
    border-right: 1px solid #ebebeb;
  }
  .testName {
    margin-left: 20px;
    border: 1px solid #ebebeb;
    font-family: "微软雅黑";
    color: #606266;
    border-top: 0px;
    border-bottom: 0px;
    width: 100px;
    text-align: center;
    font-size: 16px;
    height: 30px;
    line-height: 30px;
  }
  .virtualMachine {
    color: #606266;
    font-family: "微软雅黑";
    font-size: 18px;
  }
}
</style>
<style>
.testformdeil .el-form-item__content {
  width: 600px;
}
.blockcaser .el-cascader {
  width: 100%;
}
.custom-tree-node {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 14px;
  padding-right: 8px;
}
</style>
